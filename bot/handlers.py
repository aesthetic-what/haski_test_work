from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton
from aiogram.filters import Command, CommandStart
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from sqlalchemy import select, insert, update
from data.database import Sessionlocal
from data.models import Users
import requests
import json
from dotenv import load_dotenv
import os

load_dotenv('.env')
config = os.environ
API_URL = config['API_URL']
LOGIN_URL = config['LOGIN_URL']
TOKEN = config['TELEGRAM_TOKEN']
IMEI_TOKEN = config['IMEI_TOKEN']

class IMEI_state(StatesGroup):
    imei=State()
    token=State()

bot = Bot(token=TOKEN)

async def is_allowed_user(user_id: int):
    db = Sessionlocal()
    try:
        return db.query(Users).filter(Users.id == user_id).first() is not None
    finally:
        db.close()


def check_imei_(imei: int):
    url = 'https://api.imeicheck.net/v1/checks'

    token = IMEI_TOKEN

    # Add necessary headers
    headers = {
    'Authorization': 'Bearer ' + token,
    'Content-Type': 'application/json'
    }

    # Add body
    body =  json.dumps({
    "deviceId": f'{imei}',
    "serviceId": 12
    })

    # Execute request
    response = requests.post(url, headers=headers, data=body)
    data = response.json()
    result = f"üîç IMEI: {imei}\nüìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç: {data['status']}"
    # print(data)
    print(result)
    # print(response.text)
    # print(response.json())
    return result
    
router = Router()

@router.message(CommandStart())
async def start(message: Message, state: FSMContext):
    keyboard = InlineKeyboardBuilder([[
        InlineKeyboardButton(text='–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è', callback_data='auth')
    ]])
    if not await is_allowed_user(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É!", reply_markup=keyboard.as_markup())
        return
    await message.answer("üëã –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ IMEI –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.")
    await state.set_state(IMEI_state.imei)

@router.message(Command('test_func'))
async def test_func(message: Message, state: FSMContext):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –∏–º–µ–∏ –Ω–æ–º–µ—Ä:')
    await state.set_state(IMEI_state.imei)
    
@router.callback_query(F.data == 'auth')
async def imei_(call: CallbackQuery, state: FSMContext):
    await call.message.answer('–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω:')
    await state.set_state(IMEI_state.token)
    
@router.message(F.text, IMEI_state.token)
async def confirm_token(message: Message, state: FSMContext):
    token = message.text.strip()
    if not len(token) not in (14, 15):
        await message.answer("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω (14-15 —Ü–∏—Ñ—Ä).")
        return
    
    with Sessionlocal() as session:
        session.execute(insert(Users).values(id=message.chat.id,
                                            username=message.from_user.first_name,
                                            token=token,
                                            white_list=True))
        session.commit()
    await message.answer('–¢–æ–∫–µ–Ω –±—ã–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω')

@router.message(F.text == 'check_imei')
async def check_imei(message: Message, state: FSMContext):
    if not is_allowed_user(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É!")
        return

    data = await state.get_data()
    imei = data["imei"].strip()
    
    if not imei.isdigit() or len(imei) not in (14, 15):
        await message.answer("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π IMEI (14-15 —Ü–∏—Ñ—Ä).")
        return

    # –ó–∞–ø—Ä–æ—Å –∫ FastAPI
    response = requests.post(API_URL, json={"imei": imei, "token": IMEI_TOKEN})

    if response.status_code == 200:
        data = response.json()
        await message.answer(f"üîç IMEI: {imei}\nüìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç: {data['result']}")
    else:
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ IMEI.")
        
# @router.callback_query